// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// UserInfo represents a row from 'public.user_info'.
type UserInfo struct {
	ID        int64          `json:"id"`         // id
	FirstName sql.NullString `json:"first_name"` // first_name
	LastName  sql.NullString `json:"last_name"`  // last_name
	Email     sql.NullString `json:"email"`      // email

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserInfo exists in the database.
func (ui *UserInfo) Exists() bool {
	return ui._exists
}

// Deleted provides information if the UserInfo has been deleted from the database.
func (ui *UserInfo) Deleted() bool {
	return ui._deleted
}

// Insert inserts the UserInfo to the database.
func (ui *UserInfo) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ui._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user_info (` +
		`first_name, last_name, email` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ui.FirstName, ui.LastName, ui.Email)
	err = db.QueryRow(sqlstr, ui.FirstName, ui.LastName, ui.Email).Scan(&ui.ID)
	if err != nil {
		return err
	}

	// set existence
	ui._exists = true

	return nil
}

// Update updates the UserInfo in the database.
func (ui *UserInfo) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ui._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ui._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.user_info SET (` +
		`first_name, last_name, email` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, ui.FirstName, ui.LastName, ui.Email, ui.ID)
	_, err = db.Exec(sqlstr, ui.FirstName, ui.LastName, ui.Email, ui.ID)
	return err
}

// Save saves the UserInfo to the database.
func (ui *UserInfo) Save(db XODB) error {
	if ui.Exists() {
		return ui.Update(db)
	}

	return ui.Insert(db)
}

// Upsert performs an upsert for UserInfo.
//
// NOTE: PostgreSQL 9.5+ only
func (ui *UserInfo) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ui._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user_info (` +
		`id, first_name, last_name, email` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, first_name, last_name, email` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.first_name, EXCLUDED.last_name, EXCLUDED.email` +
		`)`

	// run query
	XOLog(sqlstr, ui.ID, ui.FirstName, ui.LastName, ui.Email)
	_, err = db.Exec(sqlstr, ui.ID, ui.FirstName, ui.LastName, ui.Email)
	if err != nil {
		return err
	}

	// set existence
	ui._exists = true

	return nil
}

// Delete deletes the UserInfo from the database.
func (ui *UserInfo) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ui._exists {
		return nil
	}

	// if deleted, bail
	if ui._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.user_info WHERE id = $1`

	// run query
	XOLog(sqlstr, ui.ID)
	_, err = db.Exec(sqlstr, ui.ID)
	if err != nil {
		return err
	}

	// set deleted
	ui._deleted = true

	return nil
}

// UserInfoByID retrieves a row from 'public.user_info' as a UserInfo.
//
// Generated from index 'user_info_pkey'.
func UserInfoByID(db XODB, id int64) (*UserInfo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, first_name, last_name, email ` +
		`FROM public.user_info ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	ui := UserInfo{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ui.ID, &ui.FirstName, &ui.LastName, &ui.Email)
	if err != nil {
		return nil, err
	}

	return &ui, nil
}
